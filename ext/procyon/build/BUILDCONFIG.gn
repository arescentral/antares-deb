# Copyright 2017 The Procyon Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declare_args() {
  # Compilation mode, one of ["opt", "dev", "dbg"].
  # - opt: apply run-time optimizations for release.
  # - dev: apply compile-time optimizations for development.
  # - dbg: add debugging symbols for debugging.
  mode = "opt"

  prefix = "/usr/local"

  sanitizer = ""
}

if (target_os == "") {
  target_os = host_os
}
if (current_os == "") {
  current_os = host_os
}
if (target_cpu == "") {
  target_cpu = target_cpu
}
if (current_cpu == "") {
  current_cpu = target_cpu
}

if (host_os == "mac") {
  if (target_os == "mac") {
    set_default_toolchain("//build/lib/mac")
  } else {
    assert(false, "$host_os cannot compile for $target_os")
  }
} else if (host_os == "linux") {
  if (target_os == "linux") {
    set_default_toolchain("//build/lib/linux")
  } else if (target_os == "mac") {
    set_default_toolchain("//build/lib/linux:cross_mac")
  } else {
    assert(false, "$host_os cannot compile for $target_os")
  }
} else {
  assert(false, "unsupported host_os $host_os")
}

_default_configs = [ "//build/lib:c++11" ]
if (mode == "dev") {
  _default_configs += [ "//build/lib:dev" ]
} else if (mode == "opt") {
  _default_configs += [ "//build/lib:opt" ]
} else if (mode == "dbg") {
  _default_configs += [ "//build/lib:dbg" ]
} else {
  assert(false, "unsupported mode $mode")
}
if (current_os == "mac") {
  _default_configs += [ "//build/lib:libc++" ]
}

if (sanitizer == "address") {
  _default_configs += [ "//build/lib:sanitize_address" ]
} else if (sanitizer == "memory") {
  _default_configs += [ "//build/lib:sanitize_memory" ]
} else if (sanitizer == "undefined") {
  _default_configs += [ "//build/lib:sanitize_undefined" ]
} else if (sanitizer != "") {
  assert(false, "unsupported sanitizer $sanitizer")
}

set_defaults("executable") {
  configs = _default_configs
}
set_defaults("static_library") {
  configs = _default_configs
}
set_defaults("shared_library") {
  configs = _default_configs
}
set_defaults("source_set") {
  configs = _default_configs
}
